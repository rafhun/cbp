// This file contains a multitude of useful mixins that may be used
// throughout the project.
// 
// CONTENTS
// 1) Auto-Separator Mixin
// 2) Helper mixin for offset positioning
// 3) Micro Clearfix by Nicolas Gallagher
// 4) Triangle Right Mixin

/*
1) Auto-Separator Mixin

We use this mixin to automatically add freely definable separators
to some elements (typically list items or links in metanavigations)

@mixin separator($margins, $separator-color, $separator)

The mixin takes the following arguments:
* $margins: sets the margin from the text to the separator -> will be applied
*   as margin-left to each element but the first and padding-left to each ::after
*   pseudo class where the separator is defined. If not set it defaults to rem-calc(6)
* $separator-color: can be used to explicitly set the color of the separator.
*   Defaults to inherit.
* $separator: defines the separator used itself, defaults to "|"

The mixin works as follows: The separator is added as content to the ::after pseudo
element of each element but the last and set off the text with margin-left on the
text and padding-left on the pseudo element. 
 */

@mixin separator($margins: rem-calc(6), $separator-color: inherit, $separator: "|") {
  margin-left: $margins;

  &:first-of-type {
    margin-left: 0;
  }

  &::after {
    content: $separator;
    color: $separator-color;
    padding-left: $margins;
  }

  &:last-of-type::after {
    content: "";
  }
}

// 2) Helper mixin for offset positioning
// About: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// Here is an improved version adding some extra features
// ---
// @param [string] $position: position
// @param [list] $args (()): offsets list
// ---
// Explanations
// 1. Output position
// 2. If `$args` is not empty
// 3. Loop other the 4 popular offsets (`$offsets`)
// 4. Check if the current one exists in `$args`
// 5. If it is found in `$args`
// 6. And if it is at last position
// 7. Set it to 0
// 8. Else if it is found at any other index
// 9. Store the next value from `$args`
// 10. If it is a valid length
// 11. Set the offset to this value
// 12. Else if it is another offset
// 13. Set the offset to 0
// 14. Else
// 15. Warn the user
// ---

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;                                               // 1
  
  @each $offset in $offsets {                                        // 3
    $index: index($args, $offset);                                   // 4
    
    @if $index {                                                     // 5
      @if $index == length($args) {                                  // 6
        #{$offset}: 0;                                               // 7
      }
      @else {                                                        // 8
        $next: nth($args, $index + 1);                               // 9
        @if is-valid-length($next) {                                 // 10
          #{$offset}: $next;                                         // 11
        }
        @else if index($offsets, $next) {                            // 12
          #{$offset}: 0;                                             // 13
        }
        @else {                                                      // 14
          @warn 'Invalid value `#{$next}` for offset `#{$offset}`.'; // 15
        }
      }
    }
  }
}

// Function checking if $value is a valid length
// ---
// @param [literal] $value: value to test
// ---
// @return [bool]

@function is-valid-length($value) {
  @return (type-of($value) == 'number' and not unitless($value)) 
       or (index(auto initial inherit 0, $value) == true);
}
 
// Shorthands
// ---

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
  @include position(relative, $args);
}

// 3) Micro Clearfix by Nicolas Gallagher
@mixin clearfix() {
  & {
    *zoom: 1;
  }

  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

// 4) Triangle Right Mixin
// This mixin helps with creating a triangle to the right
// It takes two arguments
// 
// $triangle-height: must be a valid measurment number, will be used to
// indicate the height of the element and the triangle
// 
// $triangle-color: must be a valid color value

@mixin triangle-right($triangle-height, $item-height, $triangle-color) {
  position: relative;
  // height: $triangle-height;

  &:after {
    width: 0;
    height: 0;
    content: '';
    display: block;

    position: absolute;
    top: 0;
    right: -$triangle-height;

    border-top: $item-height / 2 solid transparent;
    border-bottom: $item-height / 2 solid transparent;
    border-left: $triangle-height solid $triangle-color;
  }
}
